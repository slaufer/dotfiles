#!/usr/bin/python3
import argparse
import sys
import os
import itertools
import re

################
# CONFIG CLASS #
################

class Config:
	TERM_COLS = int(os.popen('tput cols', 'r').read())

	COL_COLORS = ['\033[38;5;39m', '\033[38;5;240m']
	# COL_COLORS = ['\033[38;5;196m', '\033[38;5;202m', '\033[38;5;226m', '\033[38;5;83m', '\033[38;5;33m', '\033[38;5;20m', '\033[38;5;91m' ]
	OFF_COLOR = '\033[38;5;37m'
	# OFF_COLOR = '\033[m'
	RESET_COLOR = '\033[m'
	FRAME_COLOR = '\033[38;5;24m'
	FRAME = FRAME_COLOR + '|' + RESET_COLOR

	COL_ARGS = 'odhaODH'
	OFF_MAX = (1 << 16) - 1

##################
# COLUMN CLASSES #
##################

# base layout column class
class Column:
	def __init__(self, config):
		self.config = config

	def format(self, line):
		return ''

	def width(self, line):
		return len(self.format(line))

class OffsetColumn(Column):
	def __init__(self, config):
		super().__init__(config)
		self.static = True

	def format(self, line):
		return self.config.OFF_COLOR + (self.fmt % line.offset)

class DataColumn(Column):
	def __init__(self, config):
		super().__init__(config)
		self.static = False

	def col_width(self):
		return len((self.fmt % 255)) 

	def format(self, line):
		out = ''.join([self.config.COL_COLORS[i%len(self.config.COL_COLORS)] + (self.fmt % byte) for (i, byte) in enumerate(line)])
		out += self.col_width() * (line.size - len(line)) * ' '
		return out

class OctalDataColumn(DataColumn):
	def __init__(self, config):
		super().__init__(config)
		self.fmt = '%03o'

class OctalOffsetColumn(OffsetColumn):
	def __init__(self, config):
		super().__init__(config)
		self.fmt = '%0' + str(len('%o' % config.OFF_MAX)) + 'o'

class DecimalDataColumn(DataColumn):
	def __init__(self, config):
		super().__init__(config)
		self.fmt = '%3d'

class DecimalOffsetColumn(OffsetColumn):
	def __init__(self, config):
		super().__init__(config)
		self.fmt = '%' + str(len('%d' % config.OFF_MAX)) + 'd'

class HexDataColumn(DataColumn):
	def __init__(self, config):
		super().__init__(config)
		self.fmt = '%02x'

class HexOffsetColumn(OffsetColumn):
	def __init__(self, config):
		super().__init__(config)
		self.fmt = '%0' + str(len('%x' % config.OFF_MAX)) + 'x'

class AsciiDataColumn(DataColumn):
	def __init__(self, config):
		super().__init__(config)
		self.fmt = '%c'

	def col_width(self):
		return 1

	# overrides format method to filter out non-printable characters
	def format(self, line):
		return super().format(Line(line.offset, line.size, [b if b >= 32 and b <= 126 else 46 for b in line]))

#################
# INPUT CLASSES #
#################

# represents data for one row
class Line(list):
	def __init__(self, offset, size, *args, **kwargs):
		self.size = size
		self.offset = offset
		super().__init__(*args, **kwargs)

	def next_offset(self):
		return self.offset + self.size

	def __repr__(self):
		return '[%d: \'%s\']' % (self.size, ''.join([chr(b) if b >= 32 and b <= 126 else '.' for b in self]))

	def __str__(self):
		return self.__repr__()

# generator reads files into Lines
def file_reader(paths, line_size):
	# if there weren't any paths in the arguments, use stdin
	if not paths:
		paths = ['-']

	# create initial buffer
	line = Line(0, line_size)

	# iterate over each file
	for path in paths:
		# open the file
		f = sys.stdin.buffer if path == '-' else open(path, 'rb')

		# iterate over each block returned by read()
		for block in f:
			for byte in block:
				if len(line) < line.size:
					# if the line isn't full yet, append this byte
					line.append(byte)
				else:
					# otherwise yield the line and create a new one
					yield line
					line = Line(line.next_offset(), line.size, [byte])

		# close the file
		f.close()

	# yield whatever is left
	if line:
		yield line

########
# MAIN #
########

def parse_args():
	# parse arguments
	parser = argparse.ArgumentParser(description='Dumps binary data in the specified columns. Columns may be repeated.')
	parser.add_argument('-o', action='append_const', dest='cols', const=OctalDataColumn, help='Octal data column')
	parser.add_argument('-d', action='append_const', dest='cols', const=DecimalDataColumn, help='Decimal data column')
	parser.add_argument('-x', action='append_const', dest='cols', const=HexDataColumn, help='Hex data column')
	parser.add_argument('-a', action='append_const', dest='cols', const=AsciiDataColumn, help='ASCII data column')
	parser.add_argument('-O', action='append_const', dest='cols', const=OctalOffsetColumn, help='Octal offset column')
	parser.add_argument('-D', action='append_const', dest='cols', const=DecimalOffsetColumn, help='Decimal offset column')
	parser.add_argument('-X', action='append_const', dest='cols', const=HexOffsetColumn, help='Hex offset column')
	parser.add_argument('-W', '--wval', help='Set value used to determine offset column width') 
	parser.add_argument('files', metavar='FILE', nargs='*')
	return parser.parse_args()


def main():
	# setup
	config = Config()
	args = parse_args()

	if args.wval:
		config.OFF_MAX = int(args.wval)

	# make sure at least one column was selected
	if not args.cols:
		print("No columns selected (-h for help)")
		sys.exit(1)

	# create column objects
	cols = [col_class(config) for col_class in args.cols]

	# figure out how many columns we can have
	if [True for col in cols if not col.static]:
		for data_cols in itertools.count():
			# render the line with maximum values so we can get the width
			max_line = Line(0, data_cols, [ 255 ] * data_cols)
			output = config.FRAME.join([col.format(max_line) for col in cols])

			# strip out color codes for an accurate width
			stripped = re.sub(r'\033\[(\d\d?;?)*?m', '', output)
			width = len(stripped)

			if width > config.TERM_COLS:
				break
		data_cols -= 1
	else:
		# if we only have static-width (e.g. offset) columns, set the data column count to 1
		data_cols = 1


	# create input reader
	reader = file_reader(args.files, data_cols) if args.files else file_reader(None, data_cols)

	# write output
	for line in reader:
		print(config.FRAME.join([col.format(line) for col in cols]) + config.RESET_COLOR)
 
if __name__ == '__main__':
	main()
