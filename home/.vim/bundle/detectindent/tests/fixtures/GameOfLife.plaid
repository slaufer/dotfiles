package demo.gameoflife;

state GameOfLife {
  var board;

	method init() {
		var startTimer = fn() => {
     	this <- RunningPeriodicalTimer;
    	buttonStop <- Visible;
    	buttonStart <- Invisible;
    	buttonNext <- Disabled;
    };					 
		var stopTimer = fn() => {
		  this <- StoppingPeriodicalTimer;
			buttonStop <- Invisible;
  		buttonStart <- Visible;
	  	buttonNext <- Enabled;
  	};

	  this.board = new Box { id = "gameBoard"; }  with Board { width = 21; height = 21;};
	  this.board.init();
    this.board <- Glider;

		var buttonStart = new Button{
		  id = "buttonStart";
			click = fn()=>{
			  startTimer();
			};
    } with Visibility;
		buttonStart.init();
		buttonStart <- Visible;

		var buttonStop = new Button{
		  id = "buttonStop";
			click = fn()=>{
			  stopTimer();
			};
	  } with Visibility;
		buttonStop.init();
		buttonStop <- Invisible;

		var buttonNext = new Button{
		  id = "buttonNext";
			click = fn()=>{this.forward();};
		} with Availability;
		buttonNext.init();
		buttonNext <- Enabled;
		
    var selectBoard = new DropDownList{
		  id = "selectBoard";
			beforeChange = fn(evt)=>{
  		  stopTimer();
  		};
		};
		selectBoard.init();

		var optionGlider = new Option { name = "Glider"; value = "Glider"; onSelectedOption = fn()=>{ this.board <- Glider; }; };
		optionGlider.init(selectBoard);

		var optionTenCellRow = new Option { name = "TenCellRow"; value = "TenCellRow"; onSelectedOption = fn()=>{ this.board <- TenCellRow; }; };
		optionTenCellRow.init(selectBoard);

		var optionSmallExploder = new Option { name = "SmallExploder"; value = "SmallExploder"; onSelectedOption = fn()=>{ this.board <- SmallExploder; }; };
		optionSmallExploder.init(selectBoard);

		var optionExploder = new Option { name = "Exploder"; value = "Exploder"; onSelectedOption = fn()=>{ this.board <- Exploder; }; };
		optionExploder.init(selectBoard);

		var optionSpaceship = new Option { name = "Spaceship"; value = "Spaceship"; onSelectedOption = fn()=>{ this.board <- Spaceship; }; };
		optionSpaceship.init(selectBoard);


		var selectSpeed = new DropDownList {
		  id = "selectSpeed";
			afterChange = fn(evt)=>{
			  match(this) {
				  case RunningPeriodicalTimer {
    			  stopTimer();
		     	  startTimer();
					}
		    };
			};
		};
		selectSpeed.init();

		var optionSlow = new Option { name = "slow"; value = "slow"; onSelectedOption = fn()=>{ this <- SlowGameOfLife; }; };
		optionSlow.init(selectSpeed);

		var optionFast = new Option { name = "fast"; value = "fast"; onSelectedOption = fn()=>{ this <- FastGameOfLife; }; };
		optionFast.init(selectSpeed);

		var optionHyper = new Option { name = "hyper"; value = "hyper"; onSelectedOption = fn()=>{ this <- HyperGameOfLife; }; };
		optionHyper.init(selectSpeed);
  }

	method forward() {
		this.board.update();
	}
}

state SlowGameOfLife case of GameOfLife {
  method onSlowGameOfLife(){ this.interval = 500; }
  method offSlowGameOfLife(){}
}

state FastGameOfLife case of GameOfLife {
  method onFastGameOfLife(){ this.interval = 300; }
  method offFastGameOfLife(){}
}

state HyperGameOfLife case of GameOfLife {
  method onHyperGameOfLife(){ this.interval = 100; }
  method offHyperGameOfLife(){}
}

method main() {
	if(window.DebugWriter == undefined){
	  window.DebugWriter = new DebugWriter{};
	};

  var game = new GameOfLife{} with PeriodicalTimer{ callback = fn() => { game.forward(); }; };
  game.init();
	game <- SlowGameOfLife;
}

state DebugWriter {
  method write(str) {
	}
}

